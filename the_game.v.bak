module func_1hz(	//除頻器1hz球更新用
	input CLK,
	input pause,
	output reg time_1hz);
	reg [24:0] count;
	always @(posedge CLK) begin
		if(count > 50000000) begin
			count <= 25'b0;
			time_1hz <= ~time_1hz;
		end
		else if(~pause)
			count <= count + 1'b1;
	end
endmodule

module func_1000hz(	//除頻器1000hz背景更新用
	input CLK,
	output reg time_1000hz);
	reg [24:0] count;
	always @(posedge CLK) begin
		if(count > 50000) begin
			count <= 25'b0;
			time_1000hz <= ~time_1000hz;
		end
	end
endmodule

module the_game(
	input CLK,
	input stage_plus,	//關卡選擇
	input shoot,	//射擊按鈕
	input pause,	//暫停
	input plate_move_r,plate_move_l,	//左右移動
	output [7:0] LightR,	//輸出RGB
	output [7:0] LightG,
	output [7:0] LightB,
	output [2:0] chooseCol,	//選擇哪一排
	output enable	//enable固定1
	);
	integer stage
	integer ball_x,ball_y,plate_x,plate_y;	//球跟板子座標
	reg [7:0] LightR_reg [7:0];
	reg [7:0] LightG_reg [7:0];
	reg [7:0] LightB_reg [7:0];	//背景顯示用
	reg	[7:0] brickandball_pos [7:0];	//磚塊+球位置	

	assign enable = 1;	//enable
	assign LightR = LightR_reg[chooseCol];	//燈輸出	
	assign LightG = LightG_reg[chooseCol];
	assign LightB = LightB_reg[chooseCol];

	func_1000hz f0(CLK,time_1000hz)	//帶入function
	func_1hz f1(CLK,pause,time_1hz)	

	initial
	begin
		stage = 0;
		chooseCol = 0;
		ball_x = 4;
		ball_y = 6; 
	end

	always @(posedge stage_plus) begin 	//關卡輸入
		if (~pause) begin
			stage = stage + 1;
			if (stage == 8) begin
				stage = 0;
			end

			case(stage)
			0:
			begin
				LightR_reg[0] = 8'b11111111;
				LightR_reg[1] = 8'b11001111;
				LightR_reg[2] = 8'b10001111;
				LightR_reg[3] = 8'b10011111;
				LightR_reg[4] = 8'b10011111;
				LightR_reg[5] = 8'b10001111;
				LightR_reg[6] = 8'b11001111;
				LightR_reg[7] = 8'b11111111;

				LightG_reg = LightR_reg;
				LightB_reg = LightG_reg;
				brickandball_pos = LightB_reg;

			end

			1:
			begin
				LightR_reg[0] = 8'b00001111;
				LightR_reg[1] = 8'b00001111;
				LightR_reg[2] = 8'b11001111;
				LightR_reg[3] = 8'b01111111;
				LightR_reg[4] = 8'b01111111;
				LightR_reg[5] = 8'b11001111;
				LightR_reg[6] = 8'b00001111;
				LightR_reg[7] = 8'b00001111;

				LightG_reg = LightR_reg;
				LightB_reg = LightG_reg;
				brickandball_pos = LightB_reg;

			end

			2:
			begin
				LightR_reg[0] = 8'b00011111;
				LightR_reg[1] = 8'b00011111;
				LightR_reg[2] = 8'b00011111;
				LightR_reg[3] = 8'b00011111;
				LightR_reg[4] = 8'b00011111;
				LightR_reg[5] = 8'b00011111;
				LightR_reg[6] = 8'b00011111;
				LightR_reg[7] = 8'b00011111;

				LightG_reg = LightR_reg;
				LightB_reg = LightG_reg;
				brickandball_pos = LightB_reg;

			end

			3:
			begin
				LightR_reg[0] = 8'b10111111;
				LightR_reg[1] = 8'b00111111;
				LightR_reg[2] = 8'b10001111;
				LightR_reg[3] = 8'b00101111;
				LightR_reg[4] = 8'b10001111;
				LightR_reg[5] = 8'b00101111;
				LightR_reg[6] = 8'b11001111;
				LightR_reg[7] = 8'b11101111;

				LightG_reg = LightR_reg;
				LightB_reg = LightG_reg;
				brickandball_pos = LightB_reg;

			end

			4:
			begin
				LightR_reg[0] = 8'b11011111;
				LightR_reg[1] = 8'b00001111;
				LightR_reg[2] = 8'b01101111;
				LightR_reg[3] = 8'b00001111;
				LightR_reg[4] = 8'b10111111;
				LightR_reg[5] = 8'b00001111;
				LightR_reg[6] = 8'b11011111;
				LightR_reg[7] = 8'b00001111;

				LightG_reg = LightR_reg;
				LightB_reg = LightG_reg;
				brickandball_pos = LightB_reg;

			end

			5:
			begin
				LightR_reg[0] = 8'b00001111;
				LightR_reg[1] = 8'b00001111;
				LightR_reg[2] = 8'b00001111;
				LightR_reg[3] = 8'b10001111;
				LightR_reg[4] = 8'b11001111;
				LightR_reg[5] = 8'b11101111;
				LightR_reg[6] = 8'b11111111;
				LightR_reg[7] = 8'b11111111;

				LightG_reg = LightR_reg;
				LightB_reg = LightG_reg;
				brickandball_pos = LightB_reg;

			end

			6:
			begin
				LightR_reg[0] = 8'b01001111;
				LightR_reg[1] = 8'b00001111;
				LightR_reg[2] = 8'b10011111;
				LightR_reg[3] = 8'b00001111;
				LightR_reg[4] = 8'b00001111;
				LightR_reg[5] = 8'b10011111;
				LightR_reg[6] = 8'b00001111;
				LightR_reg[7] = 8'b00101111;

				LightG_reg = LightR_reg;
				LightB_reg = LightG_reg;
				brickandball_pos = LightB_reg;

			end

			7:
			begin
				LightR_reg[0] = 8'b10111111;
				LightR_reg[1] = 8'b00011111;
				LightR_reg[2] = 8'b10001111;
				LightR_reg[3] = 8'b00011111;
				LightR_reg[4] = 8'b00011111;
				LightR_reg[5] = 8'b10001111;
				LightR_reg[6] = 8'b00011111;
				LightR_reg[7] = 8'b10111111;

				LightG_reg = LightR_reg;
				LightB_reg = LightG_reg;
				brickandball_pos = LightB_reg;

			end
		end
	end

	always @(posedge time_1hz) begin 	//亮燈位置更新主程式
		
	end

	always @(posedge time_1000hz) begin //排位更改 背景更新主程式
		chooseCol = chooseCol + 1;
	end
endmodule

	